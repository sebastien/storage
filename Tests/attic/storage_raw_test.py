import unittest, base64, os
from   storage     import DirectoryBackend, getTimestamp
from   storage.raw import StoredRaw, RawStorage

class Raw(unittest.TestCase):

	def setUp( self ):
		path         = os.path.basename(__file__).split(".")[0] + "-data/"
		backend      = DirectoryBackend(path)
		self.storage = RawStorage(backend)

	def test_create( self ):
		new_raw = StoredRaw()
		assert new_raw.rid,      "storage id expected"
		assert not new_raw.data, "no data expected"
		assert new_raw.timestamp <= getTimestamp (), "object created in the future"

	def test_add( self ):
		new_raw = StoredRaw(DATA)
		self.storage.add(new_raw)
		raw_id       = new_raw.rid
		assert raw_id, "stored raw has no id"
		assert new_raw.data == DATA, "stored raw has no data"
		raw_instance = self.storage.get(raw_id)
		assert raw_instance, "storage cannot retrieved stored raw data"
		assert new_raw.rid  == raw_instance.rid
		assert new_raw.data == raw_instance.data

DATA = base64.b64decode("""
iVBORw0KGgoAAAANSUhEUgAAAPAAAACgCAMAAAAFBRFXAAAA21BMVEUEAgQEAhwEHgQEHhwcAgQc
AhwcHgQcHhwEAjwEHjwcHjwEPgQcPjw8AgQ8HgQ8Hhw8Ajw8Hjw8PgQ8Phw8PjwEHlwcHlwEAnwE
Pnw8Hlw8PlwEfgQcXlw8XlxcAgRcPgRcPhxcPjx8AgR8HgRcAlxcXjx8XgR8Xhx8Xjx8fgR8fjxc
XlxcXnxcfnx8Xlx8flx8fnwEArwEAtwEPtwEftwEvgScAgScHgS8AgS8PgScfgScfhy8fgTcAgTc
XgTcAty8vnzcvgTc3nycnpy8npy8vry83tzcvrzc3txfitVHAAATnUlEQVR42u2cu47juBJAKyGY
KCBWGeHIsJKGAcedNeBk//+LLuvJKoqamd3b7h7Pmjvr9kOWdVTvIiV4/9wBeck51xM+Qs6nU8ZR
F3xPXsJyah9D2wYyPsvLiu/KeH/w+OwfSHT4ywC8LEt7r72sDTwzcBbghU7R0wI3BgREsgCcGRj/
sgIgcGqf1z8EeJBw5fcW+kcngDckCdc/AZjMMq8EvIpdMzi/yHZmnlvC0DxSY6nsndBaWcKZVdrI
SfwMXFnozwqMOEBwwMA1q2BPRr4YcF1Uy58W+ITApw4sJquCrUrMwLDQeFpgIJgdMLqrzMpN0Cd9
vtLJIAUQ3vx8wCThisDNOjkDIb1Wjc60zZorCH5Q6acDRsVNmXV2Ye1dOfye1Jg5HOeWdiyLRekn
VukMaqSLOigBbuFpMUP+M4EXTrkoozxl89BMyZqvckd1/griz91/QjNFnyU2rBI+iUpzYAYOzUCS
X6myeFZgUOBsKn2SEEyiRwddmXhBU+dtnhwYPDAXiijnupzAxWCkPJ1gWXLPLJ8TOAOrKgJTUYiw
rNNJCkX8iEx7IeD6BwCTF6KMAkSntfrPVfIrfBMWcVvPL+GWQkEV2z1pcmUJFgmWNFqdNsDTemlQ
lcaodKJqX0C3bcMPsWJYqdmRtJiSIPyEwBk6MBb57IAl3UDiDQPRui51JfmqRj8tMOq0k3BOTNyK
wIa5bbf7bbttKw7mXbiA8LzPCVw55pLnIpE23JsNFPSCzJhdrqvCMnB6OuBEEgYNuQvjOl5mxn+w
rrV9mODr8o4HAC8GjKZbBbcJ+rYbTdRrOyGSZz0lMCXTiWpiLAqWRbQ51+sEmIhxdOD3J5QwTi0s
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
SUVORK5CYII=""")

if __name__ == "__main__":
	unittest.main()

# EOF
